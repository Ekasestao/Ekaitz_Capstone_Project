@app.route("/users/<int:user_id>", methods=["GET"])
def get_user(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({"message": "Usuario no encontrado"})

    response = user_schema.jsonify(user)

    return response


@app.route("/users/<int:user_id>", methods=["PUT"])
def update_user(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({"message": "Usuario no encontrado"})

    username = request.json["users_username"]
    email = request.json["users_email"]
    password = request.json["users_password"]
    name = request.json["users_name"]
    lastname = request.json["users_lastname"]

    user.users_username = username
    user.users_email = email
    user.users_password = password
    user.users_name = name
    user.users_lastname = lastname

    db.session.commit()
    response = user_schema.jsonify(user)

    return response


@app.route("/users/<int:user_id>", methods=["PATCH"])
def patch_user(user_id):
    user = User.query.get(user_id)
    if not user:
        response = jsonify({"message": "Usuario no encontrado"})

        return response

    data = request.json

    for attribute, value in data.items():
        if hasattr(user, attribute):
            setattr(user, attribute, value)

    db.session.commit()
    response = user_schema.jsonify(user)

    return response


@app.route("/users/<int:user_id>", methods=["DELETE"])
def delete_user(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({"message": "Usuario no encontrado"})

    db.session.delete(user)
    db.session.commit()
    response = user_schema.jsonify(user)

    return response